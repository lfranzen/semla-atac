---
title: "NMF techniques"
format: html
editor: visual
---

```{r}
library(STUtility2)
library(tibble)
library(dplyr)
library(RcppML)
```

Load Visium data

```{r}
# # Assemble spaceranger output files
# samples <- list.files(path = "/Volumes/Ludvig_backup/2022/10x_Visium_data/Standard_Visium", 
#                       pattern = "filtered_feature_bc_matrix.h5", recursive = TRUE, 
#                       full.names = TRUE)
# imgs <- list.files(path = "/Volumes/Ludvig_backup/2022/10x_Visium_data/Standard_Visium", 
#                    pattern = "tissue_hires_image.png", recursive = TRUE, 
#                    full.names = TRUE)
# spotfiles <- list.files(path = "/Volumes/Ludvig_backup/2022/10x_Visium_data/Standard_Visium", 
#                         pattern = "tissue_positions_list.csv", recursive = TRUE, 
#                         full.names = TRUE)
# json <- list.files(path = "/Volumes/Ludvig_backup/2022/10x_Visium_data/Standard_Visium", 
#                    pattern = "scalefactors_json.json", recursive = TRUE, 
#                    full.names = TRUE)
# infoTable <- tibble(samples, imgs, spotfiles, json, section_id = paste0("section_", 1:4))
# 
# # Create Seurat object with 1 Sagittal Anterior section and 1 Sagittal Posterior section
# se_brain <- ReadVisiumData(infoTable[1:2, ])

samples <- "~/FFPE/10x_data/V10J14-101_A1/filtered_feature_bc_matrix.h5"
imgs <- "~/FFPE/10x_data/V10J14-101_A1/spatial/tissue_hires_image.png"
spotfiles <- "~/FFPE/10x_data/V10J14-101_A1/spatial/tissue_positions_list.csv"
json <- "~/FFPE/10x_data/V10J14-101_A1/spatial/scalefactors_json.json"
infoTable <- tibble(samples, imgs, spotfiles, json)
se_brain <- ReadVisiumData(infoTable)
```

Load single-cell data

```{r}
se_sc <- readRDS("~/Downloads/allen_cortex.rds")
```

Normalize data

```{r}
se_brain <- se_brain |>
  NormalizeData() |>
  FindVariableFeatures(nfeatures = 10000)

se_sc <- se_sc |>
  NormalizeData() |>
  FindVariableFeatures(nfeatures = 10000)
```

## Run NMF with seed

## Run mixed NMF

```{r}

# Add extra dummy variables
W_add <- do.call(bind_cols, lapply(1:10, function(i) {
  r_unif(n = nrow(W))
})) |>
  as.matrix() |>
  prop.table(margin = 2)
colnames(W_add) <- paste0("cell_", 1:10)

W_ext <- bind_cols(W, W_add)
```

```{r}
mixed_nmf <- RcppML::nmf(data = xst, 
                         k = 23 + 10, sort_model = FALSE, 
                         seed = prop.table(as.matrix(W_ext[, 2:ncol(W_ext)]), margin = 2))
```

Find shared factors

```{r}
H_final <- prop.table(mixed_nmf@h, margin = 2)
H_final[1:nrow(seeded_H), ] <- prop.table(seeded_H, margin = 2)
H_final <- prop.table(H_final, margin = 2)
W_final <- xst %*% t(H_final) #RcppML::project(w = t(H_final), data = t(xst))
msnmf_dimreduc <- CreateDimReducObject(embeddings = t(prop.table(H_final, 2)), 
                                     loadings = t(W_final),
                                     #as.matrix(W_ext[, 2:ncol(W_ext)]), 
                                     key = "MSNMF_", 
                                     assay = "Spatial")

# Add nmf to Visium Seurat object
se_brain[["msnmf"]] <- msnmf_dimreduc
```

```{r}
N <- c(24, 25)
MapFeatures(se_brain, features = paste0("MSNMF_", N))
```

Check loadings

```{r fig.width=3, fig.height=5}
library(dplyr)
library(tidyr)
sel_genes <- W_final |>
  as.data.frame() |>
  rownames_to_column(var = "gene") |>
  as_tibble() |>
  pivot_longer(where(is.numeric), names_to = "variable", values_to = "value") |>
  mutate(variable = factor(variable, levels = paste0("nmf", 1:33))) |>
  group_by(variable) |>
  arrange(-value) |>
  slice_head(n = 20)

gg <- apply(W_final[unique(sel_genes$gene), ], 2, scales::rescale)

cols <- viridis::viridis(n = 50, direction = 1)
pheatmap::pheatmap(gg, cluster_rows = F, cluster_cols = F, border_color = NA, 
                   breaks = seq(0, 1, length.out = 51), color = cols)
```

```{r}
MapFeatures(se_brain, features = "Penk")
```

## Run NNLS

```{r}
DefaultAssay(st_object) <- "Spatial"
st_object <- RunNNLS.Seurat(object = st_object, singlecell_object = se_sc, 
                            groups = "subclass")

DefaultAssay(st_object) <- "celltypeprops"
MapFeatures(st_object, features = "Oligo")
```
