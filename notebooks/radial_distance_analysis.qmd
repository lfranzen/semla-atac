---
title: "Radial distance plots"
format: html
editor: visual
---

## Introduction

In this notebook, we'll have a look at

```{r}
library(tibble)
library(ggplot2)
library(patchwork)
library(STUtility2)
library(scico)
```

## Load data

First we need to load some 10x Visium data. here we'll use a breast cancer dataset provided by 10x

```{r}
samples <- Sys.glob("~/BC_data/*/filtered_feature_bc_matrix.h5")
imgs <- Sys.glob("~/BC_data/*/spatial/tissue_hires_image.png")
spotfiles <- Sys.glob("~/BC_data/*/spatial/tissue_positions_list.csv")
json <- Sys.glob("~/BC_data/*/spatial/scalefactors_json.json")

# Create a tibble/data.frame with file paths
infoTable <- tibble(samples, imgs, spotfiles, json, sample_id = c("S1", "S2"))

# Create Seurat object
se <- ReadVisiumData(infoTable = infoTable)
```

## Analysis

Run a simple analysis workflow:

-   normalize data

-   scale data

-   find variable features

-   run dimensionality reduction by PCA

-   Create SNN graph

-   Cluster data

```{r}
se <- se |>
  NormalizeData() |>
  ScaleData() |>
  FindVariableFeatures() |>
  RunPCA() |>
  FindNeighbors(reduction = "pca", dims = 1:30) |>
  FindClusters()
```

Plot identified clusters

```{r}
MapLabels(se, column_name = "seurat_clusters") +
  plot_layout(guides = "collect") &
  theme(legend.position = "right") &
  guides(fill = guide_legend(override.aes = list(size = 3), ncol = 2))
```

```{r}
plots <- MapLabels(se, column_name = "seurat_clusters", return_plot_list = TRUE)
```

Identify center point for cluster 9 in S1

```{r fig.width=6, fig.height=4.5}
library(dplyr)
# Select all spot for S1 and remove redundant columns
all_spots <- se[[]] |>
  tibble() |>
  bind_cols(GetStaffli(se)@meta_data) |>
  filter(sampleID == 1) |>
  select(barcode, pxl_col_in_fullres, pxl_row_in_fullres, sampleID, seurat_clusters)

# Select spots for cluster "9"
selected_spots <- all_spots |>
  mutate_if(is.factor, as.character) |>
  filter(seurat_clusters == "9")

# Find centroid for cluster "9"
centroid <- selected_spots |>
  summarize(centroid_x = median(pxl_col_in_fullres),
            centroid_y = median(pxl_row_in_fullres)) |>
  unlist()

# Find center point
dist_angle <- all_spots |>
  mutate(diff_x = pxl_col_in_fullres - centroid[1],
         diff_y = pxl_row_in_fullres - centroid[2]) |>
  mutate(distance = sqrt(diff_x^2 + diff_y^2),
         angle = atan2(diff_y, diff_x)) |>
  mutate(angle = case_when(diff_x < 0 ~ angle,
                             TRUE ~ angle))

# Split angles into even slices
dist_angle <- dist_angle |>
  mutate(angle_breaks = cut(angle, breaks = seq(-pi, pi, length.out = 11))) |>
  arrange(angle_breaks) |>
  select(-diff_x, -diff_y, -sampleID) |>
  mutate_if(is.factor, as.character) |>
  mutate(angle_breaks_center = case_when(seurat_clusters == "9" ~ seurat_clusters,
                                         TRUE ~ angle_breaks)) |>
  mutate(angle_breaks = factor(angle_breaks, levels = unique(angle_breaks)))

colors <- setNames(c("grey", RColorBrewer::brewer.pal(n = 10, name = "Spectral")),
                   nm = c("9", levels(dist_angle$angle_breaks)))

dist_angle |>
  ggplot(aes(pxl_col_in_fullres, pxl_row_in_fullres, color = angle_breaks_center)) +
  geom_point() +
  theme_void() +
  scale_y_reverse() +
  scale_color_manual(values = colors)
```

```{r fig.width=8, fig.height=5}
MapFeatures(se, features = "PC_1", override_plot_dims = TRUE, pt_size = 1.5)
```

Visualize expression along each slice:

```{r fig.width=8, fig.height=8}
feature <- "PC_1"
gg <- FetchData(se, vars = feature) |>
  tibble() |>
  bind_cols(GetStaffli(se)@meta_data) |>
  filter(sampleID == 1) |>
  left_join(y = dist_angle, by = "barcode") |>
  filter(distance < 5000)

gg |> 
  ggplot(aes(distance, !! sym(feature), color = angle_breaks_center, 
             groups = angle_breaks)) +
  geom_point() +
  geom_smooth(se = FALSE) +
  facet_wrap(~angle_breaks, ncol = 2) +
  scale_color_manual(values = colors) +
  theme_minimal()
```

```{r fig.width=8, fig.height=5}
MapFeatures(se, features = "PC_5", override_plot_dims = TRUE, pt_size = 1.5)
```

```{r fig.width=8, fig.height=4}
feature <- "PC_5"
gg <- FetchData(se, vars = feature) |>
  tibble() |>
  bind_cols(GetStaffli(se)@meta_data) |>
  filter(sampleID == 1) |>
  left_join(y = dist_angle, by = "barcode") |>
  filter(distance < 5000)

gg |> 
  ggplot(aes(distance, !! sym(feature), color = angle_breaks_center, 
             groups = angle_breaks)) +
  geom_smooth(size = 2, se = FALSE) +
  #facet_wrap(~angle_breaks, ncol = 2) +
  scale_color_manual(values = colors) +
  theme_minimal()
```

```{r fig.width=8, fig.height=5}
MapFeatures(se, features = "KRT17", override_plot_dims = TRUE, pt_size = 1.5)
```

## Radial distance

```{r fig.height=6, fig.width=8}
#se <- RadialDistance(se, column_name = "seurat_clusters", sel_groups = c("0"))

se$r_dist_0_log <- ifelse(se$r_dist_0 < 0, -sqrt(-se$r_dist_0), sqrt(se$r_dist_0))
MapFeatures(se, features = "r_dist_0_log", pt_size = 2.5, override_plot_dims = TRUE,
            colors = scico::scico(n = 11, palette = "berlin"))
```
