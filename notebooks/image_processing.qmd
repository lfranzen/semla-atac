---
title: "image_processing"
format: html
editor: visual
---

## Introduction

`STUtility2` offers functions to manipulate images such as `MaskImages` and `RigidTransformImages`. In this tutorial, we will look at how these functions can be used and how to manipulate images manually.

First, we will load two `Seurat` objects: one with mouse brain data and one with mouse colon data.

```{r}
se_mbrain <- readRDS(system.file("extdata/mousebrain", "se_mbrain", package = "STUtility2"))
se_mcolon <- readRDS(system.file("extdata/mousecolon", "se_mcolon", package = "STUtility2"))
```

Before we can plot the H&E images, we need to load them with `LoadImages`. Here we can specify the height of the image with `image_height` which will rescale the image from it's original dimensions.

```{r fig.width=4, fig.height=4}
se_mbrain <- se_mbrain |> LoadImages(image_height = 500)
se_mcolon <- se_mcolon |> LoadImages(image_height = 500)

ImagePlot(se_mbrain)
ImagePlot(se_mcolon)
```

When running `LoadImages`, the images are stored as a list of `raster` objects inside the `Staffli` object that lives inside the `Seurat` object ...

```{r}
staffli_mbrain <- GetStaffli(se_mbrain)
staffli_mbrain 

staffli_mcolon <- GetStaffli(se_mcolon)
staffli_mcolon 
```

We can access these lists with `GetImages`

```{r}
mbrain_rasters <- GetImages(staffli_mbrain)
mcolon_rasters <- GetImages(staffli_mcolon)

# Plot rasters
par(mfrow = c(1, 2), mar = c(0, 0, 0, 0))
plot(mbrain_rasters[[1]])
plot(mcolon_rasters[[1]])
```

## Mask images

`MaskImages` can be applied directly to the Seurat object to remove the background around the tissue section.

Note that running `MaskImages` will overwrite the H&E images. If you want to get back the original H&E images, you can just reload them with `LoadImages`.

```{r fig.width=4, fig.height=4}
se_mbrain <- MaskImages(se_mbrain)
ImagePlot(se_mbrain)

se_mcolon <- MaskImages(se_mcolon)
ImagePlot(se_mcolon)
```

However, masking is not a trivial task and `MaskImages` might fail, in particular when faced with one of the following issues:

-   presence of staining artefacts

-   when using other stains than H&E

-   presence of bubbles or other types of speckles/dust

-   tissues with low contrast to background, e.g. adipose tissue

-   if the image is loaded in high resolution

### Custom masking (advanced)

If `MaskImages` fails, it is possible to mask the images manually, but this requires some knowledge about image processing. Below is a simple example of how one can mask the mouse brain tissue section using the `magick` R package:

```{r fig.width=4, fig.height=3.5}

# Load image as a magick-image object
image <- image_read(mcolon_rasters[[1]])

# Convert image to CMYK colorspace and extract the magenta channel
im_magenta <- image |>
    image_convert(colorspace = "cmyk") |>
    image_channel(channel = "Magenta")

# Add blur effect to image and threshold image
im_threshold <- im_magenta |>
    image_blur(sigma = 2) |>
    image_threshold(type = "black", threshold = "20%") |>
    image_threshold(type = "white", threshold = "20%") 

# Mask H&E by combining H&E image with mask
mask <- im_threshold |> 
  image_transparent(color = "black")
im_composite <- image_composite(mask, image)

# Plot images
par(mfrow = c(2, 2), mar = c(0, 0, 0, 0))
image |> as.raster() |> plot()
title("H&E image", line = -2)
im_magenta |> as.raster() |> plot()
title("Magenta color channel", col.main = "white", line = -2)
im_threshold |> as.raster() |> plot()
title("Image mask", col.main = "white", line = -2)
im_composite |> as.raster() |> plot()
title("Masked H&E image", line = -2)
```

The results are not perfect because there are still a few speckles in the background and some parts of the tissue section are masked. But even a simple approach like this can give decent results!

Once you have masked the image, you can convert it back to a `raster` object and place it into your `Seurat` object. Now we are only working with 1 tissue section, but if you have multiple tissue sections you need to make sure that the list of `raster` objects contains 1 image per sample in the correct order.

Also, you cannot adjust the dimensions of the image!!! They have to have exactly the same dimensions as the images that you started with otherwise, the spots will no longer be aligned properly.

```{r fig.width=2, fig.height=2}
staffli_mcolon@rasterlists$raw <- list(as.raster(im_composite))
se_mcolon@tools$Staffli <- staffli_mcolon

MapFeatures(se_mcolon, features = "nFeature_Spatial", image_use = "raw", 
            pt_alpha = 0.5, override_plot_dims = TRUE)
```

## Rigid transformations

With `RigidTransformImages`, we can apply rigid transformations meaning: rotations, translations (shifts along the x- and y-axis) and mirror. Positive rotation angles will rotate the image clockwise. Translations are defined as proportions of image dimensions, so a translation of `tr_x = 0.1` will move the image 10% of the image width to the right.

```{r fig.width=2, fig.height=2}

# Rotate image
transforms <- generate_rigid_transform(sampleID = 1, angle = 45)
se_mbrain_rot <- RigidTransformImages(se_mbrain, transforms = transforms)
ImagePlot(se_mbrain, image_use = "transformed")

# Move image along x-axis
transforms <- generate_rigid_transform(sampleID = 1, tr_x = 0.2)
se_mbrain_trx <- RigidTransformImages(se_mbrain, transforms = transforms)
ImagePlot(se_mbrain_trx, image_use = "transformed")

# Mirror image along x-axis
transforms <- generate_rigid_transform(sampleID = 1, mirror_x = TRUE)
se_mbrain_mirx <- RigidTransformImages(se_mbrain, transforms = transforms)
ImagePlot(se_mbrain_mirx, image_use = "transformed")
```

The spot coordinates are transformed along with the image, so they should be properly aligned when plotting. The image to use for plotting can be set in `MapLabels` and `MapFeatures` with the `image_use` argument.

```{r fig.width=2, fig.height=2.5}
MapFeatures(se_mbrain_rot, features = "nFeature_Spatial", 
            image_use = "transformed", override_plot_dims = TRUE)

MapLabels(se_mbrain_rot, column_name = "orig.ident", 
          image_use = "transformed", override_plot_dims = TRUE)
```

### Mask + transform

Masking has to be done before applying rigid transformations and cannot be done the other way around.

```{r fig.width=2, fig.height=2}
transforms <- generate_rigid_transform(sampleID = 1, angle = 45)

se_mbrain <- se_mbrain |> 
  MaskImages() |>
  RigidTransformImages(transforms = transforms)
  
ImagePlot(se_mbrain, image_use = "transformed")
```
