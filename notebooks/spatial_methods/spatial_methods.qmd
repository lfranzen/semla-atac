---
title: "Spatial methods"
format: html
editor: visual
editor_options: 
  chunk_output_type: inline
---

## Introduction

In this notebook, we'll have a look at how you can use spatial methods in `STUtility2`.

```{r warning=FALSE, message=FALSE}
library(tibble)
library(ggplot2)
library(patchwork)
library(STUtility2)
library(scico)
library(tidyr)
library(dplyr)
```

## Load data

First we need to load some 10x Visium data. here we'll use a breast cancer dataset provided by 10x

```{r}
samples <- Sys.glob("~/BC_data/*/filtered_feature_bc_matrix.h5")
imgs <- Sys.glob("~/BC_data/*/spatial/tissue_hires_image.png")
spotfiles <- Sys.glob("~/BC_data/*/spatial/tissue_positions_list.csv")
json <- Sys.glob("~/BC_data/*/spatial/scalefactors_json.json")

# Create a tibble/data.frame with file paths
infoTable <- tibble(samples, imgs, spotfiles, json, sample_id = c("S1", "S2"))

# Create Seurat object
se <- ReadVisiumData(infoTable = infoTable[1, ])
```

## Data

Next, we'll use `Seurat` to run a simple data processing/analysis workflow:

-   normalize data

-   scale data

-   find variable features

-   run dimensionality reduction by PCA

-   Create SNN graph

-   Cluster data

```{r message=FALSE, warning=FALSE}
se <- se |>
  NormalizeData() |>
  ScaleData() |>
  FindVariableFeatures() |>
  RunPCA() |>
  FindNeighbors(reduction = "pca", dims = 1:30) |>
  FindClusters()
```

Now that we have identified clusters in our data based on the spot expression profiles, we can plot these clusters spatially with `MapLabels`.

```{r}
se <- LoadImages(se)
MapLabels(se, column_name = "seurat_clusters", override_plot_dims = TRUE, 
          image_use = "raw", pt_alpha = 0.6, pt_size = 2) +
  plot_layout(guides = "collect") &
  theme(legend.position = "right") &
  guides(fill = guide_legend(override.aes = list(size = 3), ncol = 2))
```

For the purpose of this analysis, we just need to define a region of interest in our tissue sections. We could just as well use the tissue morphology as a basis to define this region. From the plot above, we can see that some clusters are confined to distinct regions, for example cluster 9:

```{r}
se$cluster_9 <- ifelse(se$seurat_clusters %in% "9", "9", NA)
MapLabels(se, column_name = "cluster_9", override_plot_dims = TRUE, 
          image_use = "raw", drop_na = TRUE, pt_size = 2) +
  plot_layout(guides = "collect") &
  theme(legend.position = "right") &
  guides(fill = guide_legend(override.aes = list(size = 3), ncol = 2))
```

## Disconnect regions

Cluster 9 is concentrated to a region rich with cancer cells but there are also a few spots in other parts of the tissue. At this point we might only be interested in one of these regions in which case we can split cluster_9 into spatially disconnected compartments. For this purpose, we can use `DisconnectRegions`:

```{r}
se <- DisconnectRegions(se, column_name = "seurat_clusters", sel_groups = "9")

MapLabels(se, column_name = "9_split", override_plot_dims = TRUE, 
          image_use = "raw", drop_na = TRUE, pt_size = 2) +
  plot_layout(guides = "collect") &
  theme(legend.position = "right") &
  guides(fill = guide_legend(override.aes = list(size = 3), ncol = 2))
```

Each spatially disconnected region in cluster 9 now has its own label, order from largest to smallest. Singletons are spots that are completely isolated from other spots with the same label.

## Radial distance

Imagine that we are interested in looking at the expression of certain genes as a function of distance to a region of interest. We can compute distances from a region of interest (ROI) using `RadialDistances`. Here we'll use cluster 3 as our ROI for the computation:

```{r}
se$cluster_3 <- ifelse(se$seurat_clusters %in% "3", "3", NA)
MapLabels(se, column_name = "cluster_3", override_plot_dims = TRUE, 
          image_use = "raw", drop_na = TRUE, pt_size = 2) +
  theme(legend.position = "right") &
  guides(fill = guide_legend(override.aes = list(size = 5), ncol = 2))
```

```{r}
se <- RadialDistance(se, column_name = "seurat_clusters", sel_groups = "3")
```

We can illustrate the results by coloring the spots based on the radial distances from cluster "3":

```{r fig.width=7, fig.height=7}
MapFeatures(se, features = "r_dist_3", center_zero = TRUE, pt_size = 2, 
            colors = RColorBrewer::brewer.pal(n = 11, name = "RdBu") |> rev(),
            override_plot_dims = TRUE)
```

The distances are calculated from the border of the ROI, where positive values represent the radial distances out from the ROI and negative values represent the radial distances towards the center of the ROI.

### Pixel coordinates

The distances are given as pixels relative to the image pixels coordinates that were loaded when creating the `Seurat` object. If we know the conversion factor between pixels in our original H&E image and microns, we can easily convert the radial distances to microns. In this example data, the center-to-center spot distance is 273 pixels in the image and we know that the actual center-to-center spot distance is 100 microns.

```{r}
se$r_dist_3 <- (100/273)*se$r_dist_3
```

### Convert radial distances

The scale of the distances is somewhat inconvenient for our color scale, so we can apply some transformation to make them easier to visualize, for example the square root of the distance:

```{r fig.width=7, fig.height=7}
se$r_dist_3_sqrt <- sign(se$r_dist_3)*sqrt(abs(se$r_dist_3))
MapFeatures(se, features = "r_dist_3_sqrt", center_zero = TRUE, pt_size = 2, 
            colors = RColorBrewer::brewer.pal(n = 11, name = "RdBu") |> rev(),
            override_plot_dims = TRUE)
```

With these distances, we can now explore the expression of certain genes as a function of distance from our ROI. Here we are only interested in the microenvironment outside of our cluster 3, so we will filter the data to have a maximum radial distance of 1000 microns outside of cluster 3:

```{r fig.width=7, fig.height=4}
sel_genes <- c("CRISP3", "IGLC2")

se[[]] |> 
  bind_cols(FetchData(se, vars = sel_genes)) |> 
  filter(r_dist_3 < 1e3) |> 
  pivot_longer(all_of(sel_genes), names_to = "variable", values_to = "value") |> 
  ggplot(aes(r_dist_3, value, color = variable)) +
    geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs")) +
    geom_vline(aes(xintercept = 0, color = "border"), linetype = "dashed")
```

Here we can see that the expression of CRISP3 is high inside cluster "3" and declines rapidly at the border whereas IGLC2 show the opposite trend. We can also visualize these trends spatially:

```{r}
MapFeatures(SubsetSTData(se, expression = r_dist_3 < 1e3), 
            features = sel_genes, override_plot_dims = TRUE, scale_alpha = TRUE,
            image_use = "raw", pt_size = 2)
```

So why bother using radial distances? Having access to this information makes it possible to identify genes that change with distance to a ROI. In the example above, we could for example identify genes whose expression decrease or increase expression distance from the tumor which gives us a useful tool to characterize the tumor microenvironment. A perhaps even more useful application is to explore the relative abundance of cell types around or inside the tumor border, which we can do if we compute cell type proportions from our data fist.

### Focused search

It is rarely the case that the microenvironment is homogeneous in all directions from the region of interest. In our breast cancer tissue section, we can clearly see that the tissue composition is different depending on which direction you look from our region of interest. `RadialDistance` therefore provides a feature to narrow down the radial distances to a predefined interval of angles.

The plot below should give you an idea about how the angles are calculated for a certain region. The ROI center is defined by taking the median of the x, y coordinates for the spots of the ROI. The angles are defined clockwise where 0° = right, 90° = down, ...

```{r}
# get coordinates
coords <- GetStaffli(se)@meta_data |> 
  bind_cols(cluster_3 = se$cluster_3)
centroid_cluster_3 <- coords |> 
  na.omit() |> 
  summarize(cx = median(pxl_col_in_fullres), 
            cy = median(pxl_row_in_fullres))

# Plot selection, center and directions
arrows <- tibble(x = centroid_cluster_3$cx + 5e3*cos(seq(0, 2*pi, length.out = 9)),
                 y = centroid_cluster_3$cy + 5e3*sin(seq(0, 2*pi, length.out = 9)),
                 x_lab = centroid_cluster_3$cx + 5.7e3*cos(seq(0, 2*pi, length.out = 9)),
                 y_lab = centroid_cluster_3$cy + 5.7e3*sin(seq(0, 2*pi, length.out = 9)),
                 angle = seq(0, 360, length.out = 9))
ggplot() +
  geom_point(data = coords, 
             aes(pxl_col_in_fullres, 
                 pxl_row_in_fullres, 
                 color = cluster_3)) +
  scale_y_reverse() +
  coord_fixed() +
  theme_void() +
  annotate("path", lty = "dashed", 
   x = centroid_cluster_3$cx + 5e3*cos(seq(0, 2*pi, length.out = 100)),
   y = centroid_cluster_3$cy + 5e3*sin(seq(0, 2*pi, length.out = 100))) +
  geom_segment(data = arrows, aes(x = centroid_cluster_3$cx, xend = x, 
                                  y = centroid_cluster_3$cy, yend = y), 
               arrow = arrow(type = "closed")) +
  geom_label(data = arrows[-9, ], aes(x_lab, y_lab, label = paste0(angle, "°"))) +
  geom_point(data = centroid_cluster_3, aes(cx, cy, fill = "center"), 
             size = 8, shape = 21, fill = "lightgray")
```

NB: Before you proceed, note that it is important that the ROI is spatially connected. If not, `RadialDistance` will complain that it finds disconnected components and will abort the function. This is intended to prevent users from defining a center outside of the ROI which would likely happen if multiple ROIs are present. It doesn't make much sense to compute radial distances from one center when there are multiple centers present. Instead, you can split the disconnected components with `DisconnectRegions` and focus on one ROI.

Now that we have an idea about how the angles are defined, we can provide an interval of angles to group the radial distances by. As you can see, the function has now filtered the data to provide a subset of spots located in a narrower search area.

```{r}
se <- RadialDistance(se, column_name = "seurat_clusters", sel_groups = "3", 
                     angles = c(200, 240))

MapFeatures(se, features = "r_dist_3")
```

If we want to go for a more exploratory approach, we can split the radial distances into slices by setting `angles_length_out`. In the example below, we narrow the search area to angles between 120-320 degrees and split it into 6 even slices.

```{r}
se <- RadialDistance(se, column_name = "seurat_clusters", sel_groups = "3", 
                    angles = c(120, 320), angles_length_out = 6)
MapLabels(se, column_name = "intervals_3", 
          colors = RColorBrewer::brewer.pal(n = 6, name = "Spectral")) &
  guides(fill = guide_legend(override.aes = list(size = 5), ncol = 3))
```

Inside our `Seurat` object meta data slot, we now have three new columns. 'angle_3', 'r_dist_3' and 'intervals_3'. The 'intervals_3' columns tells us what slice each spot belongs to. With this data, we can modify our previous plot and split it by slice. If we look at the same genes as before (CRISP3 and IGLC2), we can see that the trends is quite similar in all 6 directions:

```{r fig.width=7, fig.height=4}
sel_genes <- c("CRISP3", "IGLC2")

se[[]] |> 
  bind_cols(FetchData(se, vars = sel_genes)) |> 
  filter(r_dist_3 < 1e3) |> 
  pivot_longer(all_of(sel_genes), names_to = "variable", values_to = "value") |> 
  ggplot(aes(r_dist_3, value, color = variable)) +
    geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs")) +
    geom_vline(aes(xintercept = 0, color = "border"), linetype = "dashed") +
    facet_wrap(~ intervals_3, ncol = 3) +
    theme_minimal()
```

However, the same is of course not true for other genes. Below we can see the expression along the radial axis for three genes. Depending on the direction, these genes have very distinct expression profiles.

```{r fig.width=7, fig.height=4}
sel_genes <- c("PGM5-AS1", "CXCL14", "IGHG3")

se[[]] |> 
  bind_cols(FetchData(se, vars = sel_genes)) |> 
  filter(r_dist_3 < 1e3) |> 
  pivot_longer(all_of(sel_genes), names_to = "variable", values_to = "value") |> 
  group_by(variable) |> 
  mutate(value_centered = value - mean(value)) |> # Note that the values have been centered
  ggplot(aes(r_dist_3, value_centered, color = variable)) +
    geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs")) +
    geom_vline(aes(xintercept = 0, color = "border"), linetype = "dashed") +
    facet_wrap(~ intervals_3, ncol = 3) +
    theme_minimal()
```

If we map the expression of these genes spatially, it is quite clear that these genes are expression in different niches of the microenvironment. In fact, two of these "niches" are mostly composed of tumor cells. Hopefully, this demonstration will serve as a motivation to carefully think through how radial distances should be used for specific biological questions. The tools provided in `STUtility2` are easy to adapt to many different scenarios.

```{r}
MapFeatures(se, crop_area = c(0.45, 0.6, 0.8, 0.93),
            features = sel_genes, scale_alpha = TRUE, ncol = 3,
            image_use = "raw", pt_size = 2, colors = viridis::viridis(n = 9),
            max_cutoff = 0.99) &
  theme(legend.position = "right", legend.text = element_text(angle = 0))
```
