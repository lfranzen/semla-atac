% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generics.R, R/neighborhood_analysis.R
\name{RegionNeighbors}
\alias{RegionNeighbors}
\alias{RegionNeighbors.default}
\alias{RegionNeighbors.Seurat}
\title{Find region neighbors}
\usage{
RegionNeighbors(object, ...)

\method{RegionNeighbors}{default}(
  object,
  spots,
  outer_border = TRUE,
  keep_within = FALSE,
  verbose = FALSE,
  ...
)

\method{RegionNeighbors}{Seurat}(
  object,
  column_name,
  column_labels = NULL,
  outer_border = TRUE,
  column_key = ifelse(outer_border, "nb_to_", "border_"),
  keep_within = FALSE,
  verbose = TRUE,
  ...
)
}
\arguments{
\item{object}{A list of spatial networks generated with \code{\link{GetSpatialNetwork}}}

\item{...}{Arguments passed to other methods}

\item{spots}{A character vector with spot IDs present in `spatnet`}

\item{outer_border}{A logical specifying if the bordering spots should be returned. If set to FALSE,
the spots \strong{at} the border will be returned instead.}

\item{keep_within}{If set to TRUE, all id spots are kept, otherwise only the spots with outside
neighbors are kept}

\item{verbose}{Print messages}

\item{column_name}{string specifying a column name in your meta data
with labels, e.g. clusters or manual selections}

\item{column_labels}{character vector with labels to find nearest neighbors for.
These labels need to be present in the meta data columns specified by \code{column_name}}

\item{column_key}{prefix to columns returned in the Seurat object}
}
\description{
This function allows you to automatically identify neighbors of a selected region.
}
\details{
One way of using method this is to find spots surrounding a certain cluster. First, you need to make sure
the identity of the Seurat object is set to the meta.data column that you want to use, so for example
`se <- SetIdent(se, value = "seurat_clusters")` if you want to use the default seurat clusters.
Then you select the label that defined the region of interest using the `id` parameter, so for example
`Ã¬d = "1"` will use cluster 1 as the region. If you set the `keep.idents` parameter to TRUE, the cluster ids
of the neighboring spots will be kept in the result, otherwise they will be returned as one single goup.
You can also activate the `keep_within` parameter to include all spots of the selected region in the output,
otherwise only the spots along the region border will be kept.
}
\section{Seurat}{

If a Seurat object is provided, the \code{RegionNeighbors} takes a meta data column with categorical labels,
finds the nearest neighbors of spots in each category and returns a new meta data column with new labels for
their nearest neighbors. If \code{outer_border=FALSE} the spots that are located at the border but inside the
selected region(s) are returned instead. Note that \code{column_key} will define the prefix to the returned
column names. If \code{outer_border=FALSE}, the prefix will be "nb_to_" specifying that the spots are neighbors
to spots of the selected category and if \code{outer_border=FALSE}, the prefix will be "border_" specifying
that the spots are at the border and from the selected category.
}

\section{default method}{

The default method takes a list of spatial networks generated with \code{\link{GetSpatialNetwork}}
together with a vector of spot IDs and returns the spot IDs for the nearest neighbors.
}

\examples{
\dontrun{
}


library(STUtility2)
library(dplyr)

se_mbrain <-
  readRDS(Sys.glob(paths = paste0(system.file("extdata", package = "STUtility2"),
                                  "/mousebrain/se_mbrain")))

# Create Seurat object
se_mbrain <- se_mbrain |>
  ScaleData(verbose = FALSE) |>
  RunPCA(verbose = FALSE) |>
  FindNeighbors(verbose = FALSE) |>
  FindClusters(verbose = FALSE)

# Find neighbors to cluster 10
se_mbrain <- RegionNeighbors(se_mbrain,
                              column_name = "seurat_clusters",
                              column_labels = "10")

# Plot cluster 10 and its neighbors
se_mbrain$selected_clusters <- se_mbrain[[]] |>
  mutate(across(where(is.factor), as.character)) |>
  mutate(cl = case_when(seurat_clusters \%in\% "10" ~ seurat_clusters,
                        TRUE ~ NA_character_)) |>
  pull(cl)

MapLabels(se_mbrain, column_name = "selected_clusters") |
  MapLabels(se_mbrain, column_name = "nb_to_10")

# Find neighbors to clusters 10 and 13
se_mbrain$selected_clusters <- se_mbrain[[]] |>
  mutate(across(where(is.factor), as.character)) |>
  mutate(cl = case_when(seurat_clusters \%in\% c("10", "13") ~ seurat_clusters,
                        TRUE ~ NA_character_)) |>
  pull(cl)
se_mbrain <- RegionNeighbors(se_mbrain,
                              column_name = "seurat_clusters",
                              column_labels = c("10", "13"))

# Plot cluster 10, 13 and its neighbors
library(patchwork)
MapLabels(se_mbrain, column_name = "selected_clusters") +
  MapLabels(se_mbrain, column_name = "nb_to_10") +
  MapLabels(se_mbrain, column_name = "nb_to_13") +
  plot_layout(design = c(area(1, 1, 1, 1),
                         area(1, 2, 1, 2),
                         area(1, 3, 1, 3)))

# it is also possible to pass additional parameters to GetSpatialNetwork
# to make it find more neighbors at a larger distances
se_mbrain <- RegionNeighbors(se_mbrain,
                              column_name = "seurat_clusters",
                              column_labels = "10",
                              nNeighbors = 40,
                              maxDist = Inf)
MapLabels(se_mbrain, column_name = "nb_to_10")

}
