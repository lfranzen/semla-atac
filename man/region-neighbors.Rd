% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generics.R, R/neighborhood_analysis.R
\name{RegionNeighbors}
\alias{RegionNeighbors}
\alias{RegionNeighbors.default}
\alias{RegionNeighbors.Seurat}
\title{Find region neighbors}
\usage{
RegionNeighbors(object, ...)

\method{RegionNeighbors}{default}(
  object,
  spots,
  mode = c("outer", "inner", "inner_outer", "all_inner_outer"),
  verbose = FALSE,
  ...
)

\method{RegionNeighbors}{Seurat}(
  object,
  column_name,
  column_labels = NULL,
  mode = c("outer", "inner", "inner_outer", "all_inner_outer"),
  column_key = NULL,
  verbose = TRUE,
  ...
)
}
\arguments{
\item{object}{An object}

\item{...}{Arguments passed to other methods}

\item{spots}{A character vector with spot IDs present in `spatnet`}

\item{mode}{Select mode (see details)}

\item{verbose}{Print messages}

\item{column_name}{string specifying a column name in your meta data
with labels, e.g. clusters or manual selections}

\item{column_labels}{character vector with labels to find nearest neighbors for.
These labels need to be present in the meta data columns specified by \code{column_name}}

\item{column_key}{prefix to columns returned in the Seurat object}
}
\description{
This function allows you to automatically identify neighbors of a selected region.
}
\section{Seurat}{

If a Seurat object is provided, the \code{RegionNeighbors} takes a meta
data column (chosen with \code{column_name}) with categorical labels,
finds the nearest neighbors of spots for a selected group in this columns
(chosen with \code{column_labels}) and returns new meta data column with
labels for the nearest neighbors of the selected group. If no \code{column_labels}
are specified, the method will return a column for each separate category in
the \code{column_name} vector.

Note that the prefix to the returned column names will be selected based on the \code{mode}.
You can overwrite this behavior by manually setting \code{column_key}.

Below is some additional information about the behavior of different \code{mode}s:

\itemize{
   \item{return outer border (default): \code{mode="outer"}}
   \item{return inner border: \code{mode="inner"}}
   \item{return inner and outer borders: \code{mode="inner_outer"}}
   \item{return all selected spots and outer border: \code{mode="all_inner_outer"}}
}
}

\section{default method}{

The default method takes a list of spatial networks generated with
\code{\link{GetSpatialNetwork}} together with a vector of spot IDs
and returns the spot IDs for border spots. The behavior for border
spot selection is determined by the \code{mode}.
}

\examples{

library(STUtility2)
library(dplyr)

se_mbrain <-
  readRDS(system.file("extdata",
  "/mousebrain/se_mbrain",
  package = "STUtility2"))

# Create Seurat object
se_mbrain <- se_mbrain |>
  ScaleData(verbose = FALSE) |>
  RunPCA(verbose = FALSE) |>
  FindNeighbors(verbose = FALSE) |>
  FindClusters(verbose = FALSE)

# Find neighbors to cluster 10
se_mbrain <- RegionNeighbors(se_mbrain,
                             column_name = "seurat_clusters",
                             column_labels = "10")

# Plot cluster 10 and its neighbors
se_mbrain$selected_clusters <- se_mbrain[[]] |>
  mutate(across(where(is.factor), as.character)) |>
  mutate(cl = case_when(seurat_clusters \%in\% "10" ~ seurat_clusters,
                        TRUE ~ NA_character_)) |>
  pull(cl)

MapLabels(se_mbrain, column_name = "selected_clusters") |
  MapLabels(se_mbrain, column_name = "nb_to_10")

# Find neighbors to clusters 8 and 10
se_mbrain$selected_clusters <- se_mbrain[[]] |>
  mutate(across(where(is.factor), as.character)) |>
  mutate(cl = case_when(seurat_clusters \%in\% c("8", "10") ~ seurat_clusters,
                        TRUE ~ NA_character_)) |>
  pull(cl)
se_mbrain <- RegionNeighbors(se_mbrain,
                             column_name = "seurat_clusters",
                             column_labels = c("8", "10"))

# Plot cluster 8, 10 and its neighbors
library(patchwork)
MapLabels(se_mbrain, column_name = "selected_clusters") +
  MapLabels(se_mbrain, column_name = "nb_to_8") +
  MapLabels(se_mbrain, column_name = "nb_to_10") +
  plot_layout(design = c(area(1, 1, 1, 1),
                         area(1, 2, 1, 2),
                         area(1, 3, 1, 3)))

# it is also possible to pass additional parameters to GetSpatialNetwork
# to make it find more neighbors at a larger distances
se_mbrain <- RegionNeighbors(se_mbrain,
                             column_name = "seurat_clusters",
                             column_labels = "10",
                             nNeighbors = 40,
                             maxDist = Inf)
MapLabels(se_mbrain, column_name = "nb_to_10")

}
\seealso{
Other spatial-methods: 
\code{\link{CorSpatialFeatures}()},
\code{\link{CutSpatialNetwork}()},
\code{\link{DisconnectRegions}()},
\code{\link{GetSpatialNetwork}()},
\code{\link{RadialDistance}()},
\code{\link{RunLabelAssortativityTest}()},
\code{\link{RunLocalG}()},
\code{\link{RunNeighborhoodEnrichmentTest}()}
}
\author{
Ludvig Larsson
}
\concept{spatial-methods}
