% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/subset_and_merge.R
\name{MergeSTData}
\alias{MergeSTData}
\alias{SubsetSTData}
\title{Merge 10x Visium data}
\usage{
MergeSTData(
  x,
  y,
  merge.data = TRUE,
  merge.dr = NULL,
  project = "SeuratProject"
)

SubsetSTData(object, expression, spots = NULL, features = NULL, idents = NULL)
}
\arguments{
\item{x}{A Seurat object}

\item{y}{A Seurat object or a list of Seurat objects}

\item{merge.data}{Merge the data slots instead of just merging the counts
(which requires renormalization); this is recommended if the same normalization
approach was applied to all objects. See \code{\link{merge.Seurat}} for details.}

\item{merge.dr}{Merge specified DimReducs that are present in all objects; will
only merge the embeddings slots for the first N dimensions that are shared across
all objects. See \code{\link{merge.Seurat}} for details.}

\item{project}{\code{\link{Project}} name for the Seurat object}

\item{object}{A Seurat object}

\item{expression}{Logical expression indicating features/variables to keep}

\item{spots}{A vector of spots to keep}

\item{features}{A vector of features to keep}

\item{idents}{A vector of identity classes to keep}
}
\value{
A merged Seurat object

A filtered Seurat object
}
\description{
Merges two or more Seurat objects containing SRT data while making sure that the
images and spot coordinates are correctly structured.
If you use the default \code{\link{merge}} function you will not be able
to use any of the STUtility2 visualization methods on the output object as
the `Staffli` object will be broken.

Subset a Seurat object containing SRT data while making sure that the
images and spot coordinates are correctly structured.
If you use the default \code{\link{subset}} function you will not be able
to use any of the STUtility2 visualization methods on the output object as
the `Staffli` object will be broken. This is however not the case if the
filtering is only done at the feature level.
}
\examples{
\dontrun{
samples <- Sys.glob(paths = paste0(system.file("extdata", package = "STUtility2"), "/*/filtered_feature_bc_matrix.h5"))
imgs <- Sys.glob(paths = paste0(system.file("extdata", package = "STUtility2"), "/*/spatial/tissue_hires_image.png"))
spotfiles <- Sys.glob(paths = paste0(system.file("extdata", package = "STUtility2"), "/*/spatial/tissue_positions_list.csv"))
json <- Sys.glob(paths = paste0(system.file("extdata", package = "STUtility2"), "/*/spatial/scalefactors_json.json"))

# Create a tibble/data.frame with file paths
library(tibble)
infoTable <- tibble(samples, imgs, spotfiles, json, sample_id = c("mousebrain", "mousecolon"))

# Create Seurat object
se.list <- lapply(1:nrow(infoTable), function(i) {
  ReadVisiumData(infoTable = infoTable[i, ])
})
se.list

# Merge a mousebrain dataset with two mousecolon datasets
se.merged <- MergeSTData(x = se.list[[1]], y = c(se.list[2], se.list[2]))
se.merged
}

\dontrun{
samples <- Sys.glob(paths = paste0(system.file("extdata", package = "STUtility2"), "/*/filtered_feature_bc_matrix.h5"))
imgs <- Sys.glob(paths = paste0(system.file("extdata", package = "STUtility2"), "/*/spatial/tissue_hires_image.png"))
spotfiles <- Sys.glob(paths = paste0(system.file("extdata", package = "STUtility2"), "/*/spatial/tissue_positions_list.csv"))
json <- Sys.glob(paths = paste0(system.file("extdata", package = "STUtility2"), "/*/spatial/scalefactors_json.json"))

# Create a tibble/data.frame with file paths
library(tibble)
infoTable <- tibble(samples, imgs, spotfiles, json, sample_id = c("mousebrain", "mousecolon"))

# Create Seurat object
se <- ReadVisiumData(infoTable = infoTable)
se

# Subset by spot IDs (first 100)
se.fewspots <- SubsetSTData(se, spots = colnames(se)[1:100])
se.fewspots

# Subset by feature IDs (first 1000)
se.fewgenes <- SubsetSTData(se, features = rownames(se)[1:1000])
se.fewgenes

# Subset by expression
se.filtered <- SubsetSTData(se, expression = nFeature_Spatial > 1e3)
se.filtered
}

}
