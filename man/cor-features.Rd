% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generics.R, R/spatial_autocorrelation.R
\name{CorSpatialFeatures}
\alias{CorSpatialFeatures}
\alias{CorSpatialFeatures.default}
\title{Find features with high spatial autocorrelation}
\usage{
CorSpatialFeatures(object, ...)

\method{CorSpatialFeatures}{default}(
  object,
  spatnet,
  across_all = FALSE,
  nCores = detectCores() - 1,
  verbose = TRUE,
  ...
)
}
\arguments{
\item{object}{An object (see details)}

\item{...}{Arguments passed to other methods}

\item{spatnet}{A list of spatial networks created with \code{\link{GetSpatialNetwork}}. The spots in these
networks should match the spots in the feature matrix.}

\item{across_all}{Should the autocorrelation scores be calculated across all samples?}

\item{nCores}{Number of cores to use for the spatial autocorrelation calculation}

\item{verbose}{Print messages}
}
\value{
Either a list of tibbles or a tibble with feature names and correlation scores for
each feature in the input feature matrix
}
\description{
This function can be used to find genes with high spatial autocorrelation in SRT data.
A more detailed description of the algorithm is outlined in the Details section below.
}
\details{
The default method expects a matrix-like object with features in columns and spots in rows
and a list of spatial networks generated with \code{\link{GetSpatialNetwork}}.

If \code{across_all} is set to \code{TRUE}, the spatial autocorrelation scores will be computed
across all samples. Otherwise, the scores will be calculated for each sample separately, and returns
a list.
}
\section{Spatial autocorrelation}{

Spatial autocorrelation is the term used to describe the presence of systematic spatial
variation. Positive spatial autocorrelation of a feature is the tendency for regions that
are close together in space to have similar values for that feature.

A simple example is when you have an anatomical structure or a tissue type that spans
across multiple neighboring spots in an SRT experiment, for example a gland, an immune
infiltrate or a region of the brain. Inside such structures, you might find that the
expression levels of certain genes (or other features) are highly similar and hence
these genes have a positive spatial autocorrelation.

The method provided in \code{STUtility2} is relatively simple and fast. For each feature and spot,
the expression is averaged across all neighboring spots (typically the 6 closest neighbors)
to produce a lag expression vector. Since this vector represents the average of the surrounding
spots, we can use it to test if the expression in those spots is similar to the center spot.
One simple strategy is to calculate the pearson correlation between a genes' lag vector and
the original expression vector which typically captures the spatial autocorrelation well.
}

\section{Method steps}{

\itemize{
\item{Load a matrix with features in rows and spots in columns: \eqn{X_{expr}}}
\item{Convert the corresponding spatial network to wide format and construct a nearest
neighbor matrix \eqn{N_{neighbors}} in which neighboring spots have a value of 1
and the remaining spots have a value of 0
}
\item{\eqn{N_{neighbors}} is then multiplied with the \eqn{X_{expr}} to
calculate a lag vector for each feature: \cr \cr
\eqn{X_{lagexpr} = (N_{neighbors}*X_{expr})/n_{neighbors}} \cr \cr
where \eqn{n_{neighbors}} is the number of neighbors for each spot.
}
\item{The spatial autocorrelation score for a genes is the 'pearson' correlation of the
lag vector and the initial expression vector: \cr \cr
\eqn{spatcor_{feature} = cor(X_{lagexpr}[feature, ], X_{expr}[feature, ])}
}
}
}

\examples{
\dontrun{
se_mbrain <- readRDS(system.file("extdata/mousebrain", "se_mbrain", package = "STUtility2"))
featureMat <- FetchData(se_mbrain, vars = VariableFeatures(se_mbrain)[1:100])

coordfile <-
  system.file("extdata/mousebrain/spatial",
              "tissue_positions_list.csv",
              package = "STUtility2")

# Load coordinate data into a tibble
xys <- setNames(read.csv(coordfile, header = FALSE),
                nm = c("barcode", "selection", "grid_y", "grid_x", "y", "x"))
xys$sample <- paste0(1)
xys <- xys |>
  dplyr::mutate(barcode = paste0(barcode, "_", 1)) |>
  dplyr::filter(selection == 1) |>
  dplyr::select(barcode, x, y, sample) |>
  tibble::as_tibble()

# Create spatial networks
spatnet <- GetSpatialNetwork(xys)
spatgenes <- CorSpatialFeatures(featureMat, spatnet)

# Check genes with highest spatial autocorrelation
head(spatgenes[[1]])

# Note that the top variable genes are blood related (hemoglobin genes)
# These genes have lower spatial autocorrelation since blood vessels
# typically only cover a few spots and more randomly dispersed throughput the tissue
head(VariableFeatures(se_mbrain))

# The same principle can be used to estimate spatial autocorrelation for other features,
# for example dimensionality reduction vectors
dimMat <- se_mbrain |>
ScaleData() |>
  RunPCA() |>
  FetchData(vars = paste0("PC_", 1:10))

# Calculate spatial autocorrelation scores for principal components
spatPCs <- CorSpatialFeatures(dimMat, spatnet)
head(spatPCs)
}

}
\seealso{
Other network-methods: 
\code{\link{GetSpatialNetwork}()}
}
\concept{network-methods}
