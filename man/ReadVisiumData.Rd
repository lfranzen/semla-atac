% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/load_data.R
\name{ReadVisiumData}
\alias{ReadVisiumData}
\title{Read spaceranger output files}
\usage{
ReadVisiumData(
  infoTable,
  assay = "Spatial",
  remove_spots_outside_tissue = TRUE,
  verbose = TRUE,
  ...
)
}
\arguments{
\item{infoTable}{A `data.frame` or `tbl` with paths to spaceranger output files}

\item{assay}{Assay name (default = "Spatial")}

\item{remove_spots_outside_tissue}{Should spots outside the tissue be removed?}

\item{verbose}{Print messages}

\item{...}{Parameters passed to \code{\link{CreateSeuratObject}}}
}
\value{
A \code{\link{Seurat}} object with additional spatial information
}
\description{
This function serves as a wrapper for \code{\link{LoadAndMergeMatrices}} and
\code{\link{LoadSpatialCoordinates}} to load spaceranger output files and create
a Seurat object. The spatial information, i.e. images and spot coordinates, are
stored inside the tools slot of the `Seurat` object in an object called `Staffli`.
}
\details{
\code{ReadVisiumData} takes a `data.frame` like table as input that should hold
certain spaceranger output file paths. The table should consist of four columns:
"samples", "imgs", "spotfiles" and "json".

\itemize{
   \item{"samples" : file paths to expression matrices, e.g. `filtered_bc_matrix.h5`}
   \item{"imgs" : file paths to images, e.g. `tissue_hires_image.jpg`}
   \item{"spotfiles" : file paths to spot coordinate CSV files `tissue_positions_list.csv`}
   \item{"samples" : file paths to scalfactor JSOn files, e.g. `scalefactors_json.json`}
}
}
\section{Load data outside tissue}{

Sometimes it can be useful to load data for all spots in a 10x Visium dataset, if you
need to explore transcripts captured outside of the tissue. In this case, you can
provide paths to the `raw_feature_bc_matrix.h5` files in the spaceranger output folders
and set `remove_spots_outside_tissue = FALSE`.
}

\section{Filter data}{

If you want to filter out spots and features, you can pass the `min.cells` and
`min.features` parameters (see \code{\link{CreateSeuratObject}} for more details);
however, it is recommended to use the \code{\link{SubsetSTData}} function for filtering
after the object has been created.
}

\examples{
# Assemble spaceranger output files
samples <-
  Sys.glob(paths = paste0(system.file("extdata", package = "STUtility2"),
                          "/*/filtered_feature_bc_matrix.h5"))
imgs <-
  Sys.glob(paths = paste0(system.file("extdata", package = "STUtility2"),
                          "/*/spatial/tissue_hires_image.jpg"))
spotfiles <-
  Sys.glob(paths = paste0(system.file("extdata", package = "STUtility2"),
                          "/*/spatial/tissue_positions_list.csv"))
json <-
  Sys.glob(paths = paste0(system.file("extdata", package = "STUtility2"),
                          "/*/spatial/scalefactors_json.json"))

# Create a tibble/data.frame with file paths
library(tibble)
infoTable <- tibble(samples, imgs, spotfiles, json, sample_id = c("mousebrain", "mousecolon"))

# Create Seurat object
se <- ReadVisiumData(infoTable = infoTable)
se

}
\seealso{
Other pre-process: 
\code{\link{LoadAndMergeMatrices}()},
\code{\link{LoadSpatialCoordinates}()}
}
\concept{pre-process}
