% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generics.R, R/mask.R
\name{MaskImages}
\alias{MaskImages}
\alias{MaskImages.default}
\alias{MaskImages.Seurat}
\title{Mask images}
\usage{
MaskImages(object, ...)

\method{MaskImages}{default}(object, xy_coords = NULL, minPixels = 100, verbose = TRUE, ...)

\method{MaskImages}{Seurat}(
  object,
  section_numbers = NULL,
  minPixels = 100,
  verbose = TRUE,
  ...
)
}
\arguments{
\item{object}{An object}

\item{...}{Arguments passed to other methods}

\item{xy_coords}{Optional tibble with spot coordinates matching the input image}

\item{minPixels}{Minimum area for blobs used to remove small artefacts given in pixels.}

\item{verbose}{Print messages}

\item{section_numbers}{An integer vector specifying samples to mask}
}
\description{
Image masking can sometimes be useful when you want to remove background from
an H&E image. This is usually only relevant when creating figures. This function
provides a simple image masking technique based on blob extraction. Since image
masking is a challenging task, it is not guaranteed that it will work on all
H&E images. Certain artefacts can be particularly difficult to remove, for example
bubbles or if the tissue stain hasn't been removed properly.

Even if some artefacts are detected by the algorithm, you can provide a set of
spot coordinates that will be used to try to filter out artefacts that are not
covered by spots.

Note that this method is only useful on H&E images. Other stains or image types
(e.g. immunofluorescence images) will most likely not work.
}
\section{default method}{

returns a masked 'magick-image' object
}

\section{Seurat}{

Returns a Seurat object with masked images
}

\examples{

library(STUtility2)
library(magick)
library(dplyr)

# Load image
lowresimagefile <- system.file("extdata/mousebrain/spatial",
                               "tissue_lowres_image.png",
                               package = "STUtility2")
im <- image_read(lowresimagefile)

# Load coordinates
coordinatesfile <- system.file("extdata/mousebrain/spatial",
                               "tissue_positions_list.csv",
                               package = "STUtility2")
xy <- LoadSpatialCoordinates(coordinatefiles = coordinatesfile)

# Load scalefactors
json <- system.file("extdata/mousebrain/spatial",
                    "scalefactors_json.json",
                    package = "STUtility2")
scalefactors <- jsonlite::read_json(path = json)
xy <- xy |>
  mutate(across(pxl_row_in_fullres:pxl_col_in_fullres,
                ~ round(.x*scalefactors$tissue_lowres_scalef))) |>
  select(pxl_row_in_fullres:pxl_col_in_fullres)

im_masked <- MaskImages(im, xy_coords = xy)

par(mfrow = c(1, 2), mar = c(0, 0, 0, 0))
im |> as.raster() |> plot()
im_masked |> as.raster() |> plot()


library(STUtility2)

# Load example Visium data
se_mbrain <- readRDS(system.file("extdata/mousebrain", "se_mbrain", package = "STUtility2"))
se_mcolon <- readRDS(system.file("extdata/mousecolon", "se_mcolon", package = "STUtility2"))
se_merged <- MergeSTData(se_mbrain, se_mcolon) |> LoadImages()
se_merged <- se_merged |> MaskImages()

# Plot masked images
ImagePlot(se_merged)

}
\seealso{
Other image transformations: 
\code{\link{RigidTransformImages}()}
}
\concept{image transformations}
