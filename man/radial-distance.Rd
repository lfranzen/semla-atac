% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generics.R, R/radial_distance.R
\name{RadialDistance}
\alias{RadialDistance}
\alias{RadialDistance.default}
\alias{RadialDistance.Seurat}
\title{Calculate radial distances from a region border}
\usage{
RadialDistance(object, ...)

\method{RadialDistance}{default}(object, spots, verbose = TRUE, ...)

\method{RadialDistance}{Seurat}(object, column_name, sel_groups = NULL, verbose = TRUE, ...)
}
\arguments{
\item{object}{An object}

\item{...}{Arguments passed to other methods}

\item{spots}{A character vector with spot IDs present `object`}

\item{verbose}{Print messages}

\item{column_name}{A character specifying the name of a column in your meta data that contains
categorical data, e.g. clusters or manual selections}

\item{sel_groups}{A character vector to select specific groups in \code{column_name} with.
All groups are selected by default, but the common use case is to select a region of interest.}
}
\value{
A numeric vector with radial distances. If the input object is of class
`Seurat`, the radial distances will be returned in the meta data slot.
}
\description{
Calculates the radial distances to surrounding spots from a selected
group of spots covering a defined regions. The region could for example
represent an isolated tumor in the tissue section surrounded by stroma. First,
the border of the selected region is defined and for each spot outside
of this border, the distance is calculated to its nearest border spot.
Spots located inside the selected region will have negative distances and
spots located outside of the selected region will have positive distances.
Having access to the radial distances can be useful when inspecting changes
in gene expression as a function of distance to a region of interest.
}
\examples{

\dontrun{
library(STUtility2)
library(ggplot2)
library(patchwork)

# Get coordinates
galt_spots_file <- "~/STUtility2/repo/STUtility2/inst/extdata/mousecolon/galt_spots.csv"
galt_spots <- read.csv(galt_spots_file) |>
  as_tibble()

# read coordinates
coordfile <- system.file("extdata/mousecolon/spatial",
                         "tissue_positions_list.csv",
                         package = "STUtility2")
coords <- read.csv(coordfile, header = FALSE) |>
  filter(V2 == 1) |>
  select(V1, V6, V5) |>
  setNames(nm = c("barcode", "x", "y")) |>
  bind_cols(sampleID = 1) |>
  as_tibble()

# Select spots
spots <- galt_spots$barcode[galt_spots$selection == "GALT"]
head(spots)

# Calculate radial distances
radial_distances <- RadialDistance(coords, spots)
gg <- bind_cols(coords, r_dist =  radial_distances) |>
  left_join(y = galt_spots, by = "barcode")

# Convert to sqrt scale
gg <- gg |>
  mutate(r_dist_sqrt = case_when(r_dist < 0 ~ -sqrt(abs(r_dist)),
                                 r_dist >= 0 ~ sqrt(r_dist)))

# Make plot
p1 <- ggplot(gg, aes(x, y, color = r_dist_sqrt)) +
  geom_point() +
  scale_y_reverse() +
  scale_color_gradientn(colours = RColorBrewer::brewer.pal(n = 11, name = "RdBu"))
p2 <- ggplot(gg, aes(x, y, color = selection)) +
  geom_point() +
  scale_y_reverse()

# Wrap plots
wrap_plots(p2, p1, ncol = 2) &
  coord_fixed() &
  theme_void()
}


library(STUtility2)
library(ggplot2)
library(patchwork)

se_mcolon <- readRDS(system.file("extdata/mousecolon", "se_mcolon", package = "STUtility2"))
se_mcolon <- RadialDistance(se_mcolon, column_name = "selection", sel_groups = "GALT")

# Plot results
p1 <- MapLabels(se_mcolon, column_name = "selection")
p2 <- MapFeatures(se_mcolon, features = "r_dist_GALT", colors = c("lightgray", "black"))
p1 | p2

#  Plot expression as function of distance
sel_genes <- c("Clu", "Tagln")
gg <- FetchData(se_mcolon, vars = c(sel_genes, "r_dist_GALT")) |>
  pivot_longer(all_of(sel_genes), names_to = "variable", values_to = "value")

# Plot features
p1 <- MapFeatures(se_mcolon, features = sel_genes)

# Plot expression as a function of distance
p2 <- ggplot(gg, aes(r_dist_GALT, value, color = variable)) +
  geom_smooth(method = "loess", span = 0.2, formula = y ~ x) +
  geom_vline(xintercept = 0, linetype = "dashed") +
  theme_minimal()

# Combine plots
p1/p2

}
